# Сетевые команды для диагностики и отладки

## 1. **nc (netcat)**

Прослушивание порта TCP:
```sh
nc -lvkp <порт>
```
- **Описание**: Прослушивает указанный TCP-порт и выводит/принимает данные. Используется для создания простого TCP-сервера или клиента при тестировании соединений.
- **Ключи**:
  - `-l` — слушать (listen).
  - `-v` — подробный режим (verbose).
  - `-k` — не закрывать после одного соединения (fork).
  - `-p` — указание порта.

## 2. **socat**

Эхо-сервер на TCP-порту (повторяет полученные данные обратно):
```sh
socat -v TCP-LISTEN:<порт>,reuseaddr,fork EXEC:/bin/cat
```
- **Описание**: Более мощная альтернатива `nc`. Используется для отладки, проксирования, создания туннелей и эхо-серверов.
- **Ключи**:
  - `TCP-LISTEN:<порт>` — слушать TCP-порт.
  - `reuseaddr` — разрешить быстрое переподключение.
  - `fork` — форкать процесс на каждый клиент.
  - `EXEC:/bin/cat` — эхо-сервер, повторяющий входящие данные.

## 3. **ss**

Проверка сокетов:
```sh
ss -ntlp | grep <порт>
```
- **Описание**: Показывает информацию о сетевых сокетах. Используется для проверки, какие процессы слушают какие порты.
- **Ключи**:
  - `-n` — не резолвит имена.
  - `-t` — TCP-сокеты.
  - `-l` — слушающие (listening).
  - `-p` — показывает процесс/PID.

## 4. **iptables**

Просмотр правил брандмауэра и NAT:
```sh
iptables -L -n -v
iptables -t nat -L -n -v
```
- **Описание**: Используется для проверки и настройки фильтрации и переадресации пакетов.

## 5. **tcpdump**

Сниффер пакетов:
```sh
tcpdump -i <интерфейс> port <порт>
```
- **Описание**: Используется для отладки сетевого трафика, чтобы видеть, какие пакеты приходят и уходят.

## 6. **telnet**

Тестирование TCP-соединений:
```sh
telnet <ip-адрес> <порт>
```
- **Описание**: Простой клиент для проверки доступности порта и установления соединения.

## Примечания

- **Установка утилит** (для Ubuntu/Debian):
  ```sh
  apt update
  apt install socat tcpdump netcat-traditional
  ```
- При работе с Redsocks и прокси обязательно проверяйте доступность целевых сервисов отдельно.